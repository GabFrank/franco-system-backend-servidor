type Gasto {
    id:ID!
    sucursalId: Int
    caja: PdvCaja
    responsable: Funcionario
    tipoGasto: TipoGasto
    autorizadoPor: Funcionario
    observacion: String
    creadoEn: Date
    usuario: Usuario
    gastoDetalleList: [GastoDetalle]
    activo: Boolean
    finalizado: Boolean
    retiroGs: Float
    retiroRs: Float
    retiroDs: Float
    vueltoGs: Float
    vueltoRs: Float
    vueltoDs: Float
    sucursalVuelto: Sucursal
    sucursal: Sucursal
}

input GastoInput {
    id:ID
    cajaId: Int
    responsableId: Int
    tipoGastoId: Int
    autorizadoPorId: Int
    observacion: String
    creadoEn: Date
    usuarioId: Int
    retiroGs: Float
    retiroRs: Float
    retiroDs: Float
    vueltoGs: Float
    vueltoRs: Float
    vueltoDs: Float
    activo: Boolean
    finalizado: Boolean
    sucursalId: Int
}

type GastoPage {
    getTotalPages: Int
    getTotalElements: Int
    getNumberOfElements: Int
    isFirst: Boolean
    isLast: Boolean
    hasNext: Boolean
    hasPrevious: Boolean
    getContent: [Gasto]
    getPageable: Pageable
}

extend type Query {
    gasto(id:ID!, sucId: ID):Gasto
    gastos(page:Int = 0, size:Int = 10, sucId: ID):[Gasto]!
    countGasto: Int
    gastosPorFecha(inicio:String, fin:String, sucId: ID):[Gasto]
    gastosPorCajaId(id:ID!, sucId: ID):[Gasto]
    filterGastos(id:ID, cajaId:ID, sucId:ID, responsableId:ID, descripcion:String, page:Int, size:Int):GastoPage
}

extend type Mutation {
    saveGasto(entity:GastoInput!, printerName: String, local: String):Gasto!
    deleteGasto(id:ID!, sucId: ID):Boolean!
}

