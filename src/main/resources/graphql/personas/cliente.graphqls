type Cliente {
    id:ID!
    tipo: TipoCliente
    persona: Persona
    nombre: String
    credito: Float
    creadoEn: Date
    contactos: [Contacto]
    usuario: Usuario
    saldo: Float
    codigo: String
    sucursal: Sucursal
    tributa: Boolean
    verificadoSet: Boolean
}

input ClienteInput {
    id:ID
    tipo: TipoCliente
    personaId: Int
    nombre: String
    credito: Float
    creadoEn: Date
    direccion: String
    usuarioId: Int
    documento: String
    saldo: Float
    codigo: String
    sucursalId: Int
    tributa: Boolean
    verificadoSet: Boolean
}

type ClientePage {
    getTotalPages: Int
    getTotalElements: Int
    getNumberOfElements: Int
    isFirst: Boolean
    isLast: Boolean
    hasNext: Boolean
    hasPrevious: Boolean
    getContent: [Cliente]
    getPageable: Pageable
}

extend type Query {
    cliente(id:ID!):Cliente
    clientePorPersonaId(id:ID): Cliente
    clientePorPersona(texto:String): [Cliente]
    clientePorTelefono(texto:String): [Cliente]
    onSearchWithFilters(texto:String, tipo: TipoCliente, page: Int, size: Int): ClientePage
    clientes(page:Int = 0, size:Int = 10):[Cliente]!
    countCliente: Int
}

extend type Mutation {
    saveCliente(cliente:ClienteInput!):Cliente!
    deleteCliente(id:ID!):Boolean!
}

enum TipoCliente {
    NORMAL,
    ASOCIADO,
    CONVENIADO,
    FUNCIONARIO,
    VIP
}

