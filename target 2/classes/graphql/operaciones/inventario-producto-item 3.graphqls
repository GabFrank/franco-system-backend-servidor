type InventarioProductoItem {
    id:ID!
    inventarioProducto: InventarioProducto
    zona: Zona
    presentacion: Presentacion
    cantidad: Float
    cantidadFisica: Float
    vencimiento: Date
    estado: InventarioProductoEstado
    creadoEn: Date
    usuario: Usuario
}

input InventarioProductoItemInput {
    id:Int
    inventarioProductoId: Int
    zonaId: Int
    presentacionId: Int
    cantidad: Float
    cantidadFisica: Float
    vencimiento: String
    estado: InventarioProductoEstado
    usuarioId: Int
}

type InventarioProductoItemPage {
    getTotalPages: Int
    getTotalElements: Int
    getNumberOfElements: Int
    isFirst: Boolean
    isLast: Boolean
    hasNext: Boolean
    hasPrevious: Boolean
    getContent: [InventarioProductoItem]
    getPageable: Pageable
}

extend type Query {
    inventarioProductoItem(id:ID!):InventarioProductoItem
    inventarioProductosItem(page:Int = 0, size:Int = 10):[InventarioProductoItem]!
    inventarioProductosItemPorInventarioProducto(id:ID!, page:Int = 0, size:Int = 10):[InventarioProductoItem]!
    inventarioProductoItemWithFilter(
        startDate: String, endDate: String, sucursalIdList: [Int], usuarioIdList:[ID], productoIdList:[ID],
        page: Int, size: Int, orderBy: String, tipoOrder: String): InventarioProductoItemPage
    reporteInventario(
        startDate: String, endDate: String, sucursalIdList: [Int], usuarioIdList:[ID], productoIdList:[ID],
        page: Int, size: Int, orderBy: String, tipoOrder: String, nickname: String): String
}

extend type Mutation {
    saveInventarioProductoItem(inventarioProductoItem:InventarioProductoItemInput!):InventarioProductoItem!
    deleteInventarioProductoItem(id:ID!):Boolean!
}

enum InventarioProductoEstado {
  BUENO,
  AVERIADO,
  VENCIDO
}


