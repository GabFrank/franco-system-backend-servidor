type PdvCaja {
    id:ID!
    descripcion: String,
    activo: Boolean,
    estado: PdvCajaEstado,
    tuvoProblema: Boolean,
    fechaApertura: Date,
    fechaCierre: Date,
    observacion: String,
    maletin: Maletin,
    creadoEn: Date
    usuario: Usuario
    conteoApertura: Conteo
    conteoCierre: Conteo
    balance: CajaBalance
    sucursalId: Int
    sucursal: Sucursal
    verificado: Boolean
    verificadoPor: Usuario
}

input PdvCajaInput {
    id:ID
    descripcion: String,
    activo: Boolean,
    estado: PdvCajaEstado,
    tuvoProblema: Boolean,
    fechaApertura: Date,
    fechaCierre: Date,
    observacion: String,
    maletinId: Int,
    creadoEn: Date
    usuarioId: Int
    conteoAperturaId: Int
    conteoCierreId: Int
    sucursalId: Int
    verificado: Boolean
    verificadoPorId: Int
}

extend type Query {
    pdvCaja(id:ID!, sucId: ID):PdvCaja
    pdvCajas(page:Int = 0, size:Int = 10, sucId: ID):[PdvCaja]!
    countPdvCaja: Int
    cajasPorFecha(inicio:String, fin:String, sucId:ID):[PdvCaja]
    cajaAbiertoPorUsuarioId(id:ID!):[PdvCaja]
    cajaAbiertoPorUsuarioIdPorSucursal(id:ID!, sucId: ID):PdvCaja
    imprimirBalance(id:ID!, printerName: String, local: String, sucId: ID):PdvCaja
    balancePorFecha(inicio: String, fin: String, sucId: ID): CajaBalance
    cajasPorUsuarioId(id:ID!, page: Int, size: Int):[PdvCaja]
}

extend type Mutation {
    savePdvCaja(pdvCaja:PdvCajaInput!):PdvCaja!
    savePdvCajaPorSucursal(pdvCaja:PdvCajaInput!):PdvCaja!
}

enum PdvCajaEstado {
    EN_PROCESO  ,
    CONCLUIDO,
    NECESITA_VERIFICACION,
    EN_VERIFICACION,
    VERIFICADO_CONCLUIDO_SIN_PROBLEMA,
    VERIFICADO_CONCLUIDO_CON_PROBLEMA
}

