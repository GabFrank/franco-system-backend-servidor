type PedidoItem {
    id:ID!
    pedido: Pedido
    producto: Producto
    precioUnitario: Float
    notaPedido: NotaPedido
    descuentoUnitario: Float
    bonificacion: Boolean
    bonificacionDetalle: String
    observacion: String
    frio: Boolean
    estado: PedidoItemEstado
    vencimiento: Date
    creadoEn: Date
    usuario: Usuario
    presentacion: Presentacion
    cantidad: Float
    valorTotal: Float
    notaRecepcion: NotaRecepcion
    compraItem: CompraItem
}

input PedidoItemInput {
    id:ID
    pedidoId: Int
    productoId: Int
    notaPedidoId: Int
    cantidad: Float
    precioUnitario: Float
    descuentoUnitario: Float
    bonificacion: Boolean
    bonificacionDetalle: String
    observacion: String
    frio: Boolean
    vencimiento: Date
    estado: PedidoItemEstado
    usuarioId: Int
    presentacionId: Int
    creadoEn: Date
    valorTotal: Float
    notaRecepcionId: Int
}

type PedidoItemPage {
    getTotalPages: Int
    getTotalElements: Int
    getNumberOfElements: Int
    isFirst: Boolean
    isLast: Boolean
    hasNext: Boolean
    hasPrevious: Boolean
    getContent: [PedidoItem]
    getPageable: Pageable
}

extend type Query {
    pedidoItem(id:ID!):PedidoItem
    pedidoItemPorPedidoPage(id:ID!, page:Int = 0, size:Int = 10):PedidoItemPage!
    pedidoItemPorPedido(id:ID!):[PedidoItem]!
    countPedidoItem: Int
    pedidoItemPorPedidoIdSobrante(id:ID, page:Int = 0, size:Int = 10): PedidoItemPage!
    pedidoItemPorNotaRecepcion(id:ID, page:Int = 0, size:Int = 10): PedidoItemPage!
}

extend type Mutation {
    savePedidoItem(pedidoItem:PedidoItemInput!):PedidoItem!
    deletePedidoItem(id:ID!):Boolean!
    updateNotaRecepcion(pedidoItemId: ID!, notaRecepcionId: ID): PedidoItem
    addPedidoItemListToNotaRecepcion(notaRecepcion: ID, pedidoItemIdList: [ID]): Boolean
}

enum PedidoItemEstado {
    ACTIVO,
    CANCELADO,
    DEVOLUCION,
    CONCLUIDO,
    EN_FALTA
}


